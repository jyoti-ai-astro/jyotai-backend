import type { VercelRequest, VercelResponse } from '@vercel/node';

// Mock PDF generation (in real app, would use jsPDF or similar)
function generatePDFContent(predictionData: any, userInfo: any, additionalData: any = {}) {
  const pdfContent = {
    header: {
      title: "JyotAI Astrological Report",
      user: userInfo.name,
      date: new Date().toISOString().split('T')[0],
      report_id: `JYOT${Date.now().toString().slice(-6)}`
    },
    user_details: {
      name: userInfo.name,
      dob: userInfo.dob || 'Not provided',
      time: userInfo.time || 'Not provided',
      place: userInfo.place || 'Not provided'
    },
    prediction: {
      summary: predictionData.summary,
      insights: predictionData.insights || {}
    },
    premium_features: additionalData.premium_features || null,
    footer: {
      generated_by: "JyotAI - Your AI Astrologer",
      website: "https://jyotai.vercel.app",
      disclaimer: "This report is for entertainment purposes only."
    }
  };

  // Convert to base64 data URL for download
  const pdfContentString = JSON.stringify(pdfContent, null, 2);
  const base64Content = Buffer.from(pdfContentString).toString('base64');
  
  return `data:application/pdf;base64,${base64Content}`;
}

export default async function handler(req: VercelRequest, res: VercelResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }

  const { prediction_data, user_info, additional_data, format = 'json' } = req.body;

  if (!prediction_data || !user_info) {
    return res.status(400).json({ error: "Prediction data and user info required" });
  }

  try {
    if (format === 'html') {
      // Generate HTML version for better formatting
      const htmlContent = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>JyotAI Astrological Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
        .header { text-align: center; border-bottom: 2px solid #4ECDC4; padding-bottom: 20px; }
        .title { color: #FF6B6B; font-size: 28px; margin-bottom: 10px; }
        .section { margin: 30px 0; }
        .section-title { color: #4ECDC4; font-size: 20px; border-bottom: 1px solid #eee; padding-bottom: 5px; }
        .insight-category { margin: 15px 0; }
        .insight-title { font-weight: bold; color: #333; }
        .premium-badge { background: linear-gradient(45deg, #FF6B6B, #4ECDC4); color: white; padding: 5px 10px; border-radius: 15px; font-size: 12px; }
        .footer { text-align: center; margin-top: 50px; padding-top: 20px; border-top: 1px solid #eee; color: #666; }
    </style>
</head>
<body>
    <div class="header">
        <h1 class="title">ðŸ”® JyotAI Astrological Report</h1>
        <p><strong>For:</strong> ${user_info.name}</p>
        <p><strong>Generated:</strong> ${new Date().toLocaleDateString()}</p>
        <p><strong>Report ID:</strong> JYOT${Date.now().toString().slice(-6)}</p>
    </div>

    <div class="section">
        <h2 class="section-title">Birth Details</h2>
        <p><strong>Date of Birth:</strong> ${user_info.dob || 'Not provided'}</p>
        <p><strong>Time of Birth:</strong> ${user_info.time || 'Not provided'}</p>
        <p><strong>Place of Birth:</strong> ${user_info.place || 'Not provided'}</p>
    </div>

    <div class="section">
        <h2 class="section-title">Prediction Summary</h2>
        <p>${prediction_data.summary}</p>
    </div>

    <div class="section">
        <h2 class="section-title">Detailed Insights</h2>
        ${Object.entries(prediction_data.insights || {}).map(([category, insight]) => `
            <div class="insight-category">
                <div class="insight-title">${category.charAt(0).toUpperCase() + category.slice(1)}:</div>
                <p>${insight}</p>
            </div>
        `).join('')}
    </div>

    ${additional_data?.premium_features ? `
    <div class="section">
        <h2 class="section-title">Premium Insights <span class="premium-badge">PREMIUM</span></h2>
        <p><strong>Life Path Number:</strong> ${additional_data.premium_features.life_path_number}</p>
        <p><strong>Life Path Summary:</strong> ${additional_data.premium_features.life_path_summary}</p>
        <p><strong>Nakshatra:</strong> ${additional_data.premium_features.nakshatra}</p>
        <p><strong>Lucky Gem:</strong> ${additional_data.premium_features.lucky_gem}</p>
        
        <div style="margin-top: 20px;">
            <h3>Auspicious Timings</h3>
            ${Object.entries(additional_data.premium_features.muhurat_times || {}).map(([time, period]) => `
                <p><strong>${time.replace('_', ' ').toUpperCase()}:</strong> ${period}</p>
            `).join('')}
        </div>
    </div>
    ` : ''}

    <div class="footer">
        <p><strong>Generated by JyotAI - Your AI Astrologer</strong></p>
        <p>Visit us at: https://jyotai.vercel.app</p>
        <p><em>This report is for entertainment purposes only.</em></p>
    </div>
</body>
</html>
      `;
      
      const base64Html = Buffer.from(htmlContent).toString('base64');
      return res.status(200).json({ 
        pdf_url: `data:text/html;base64,${base64Html}`,
        format: 'html',
        download_name: `JyotAI_Report_${user_info.name}_${Date.now()}.html`
      });
    }

    // Default JSON format
    const pdfDataUrl = generatePDFContent(prediction_data, user_info, additional_data);
    
    return res.status(200).json({ 
      pdf_url: pdfDataUrl,
      format: 'json',
      download_name: `JyotAI_Report_${user_info.name}_${Date.now()}.json`,
      generated_at: new Date().toISOString()
    });
  } catch (error) {
    console.error('PDF generation error:', error);
    return res.status(500).json({ error: 'Failed to generate PDF report' });
  }
}